/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views.Doctor;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionListener;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import models.Appointment;

/**
 *
 * @author richa_bfe6tpy
 */
public class DoctorViewAppointmentsView extends javax.swing.JPanel {

    /**
     * Creates new form DoctorViewAppointmentsView
     */
    public DoctorViewAppointmentsView() {
        initComponents();
        DoctorViewAppointmentsList.setCellRenderer(createListRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DoctorBackButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DoctorViewAppointmentsList = new javax.swing.JList<>();
        DoctorViewAppointmentsLabel = new javax.swing.JLabel();

        DoctorBackButton.setText("Back");

        DoctorViewAppointmentsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(DoctorViewAppointmentsList);

        DoctorViewAppointmentsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DoctorViewAppointmentsLabel.setText("Appointments");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DoctorBackButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(DoctorViewAppointmentsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DoctorViewAppointmentsLabel)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(DoctorBackButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    public void addBackListener(ActionListener listenForBack){
        DoctorBackButton.addActionListener(listenForBack);
    }
    
    public void setDoctorViewAppointmentsList(DefaultListModel<Appointment> model){
        DoctorViewAppointmentsList.setModel(model);
    }
    
    private static ListCellRenderer<? super Appointment> createListRenderer() {
      return new DefaultListCellRenderer() {
          private Color background = new Color(0, 100, 255, 15);
          private Color defaultBackground = (Color) UIManager.get("List.background");
          
          public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                        boolean isSelected, boolean cellHasFocus) {
              Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
              if (c instanceof JLabel) {
                  JLabel label = (JLabel) c;
                  Appointment app = (Appointment) value;
                  label.setText(String.format("Patient:%s         %s", app.getPatient().getName(),app.getAppointmentDate().toString()));
                  if (!isSelected) {
                      label.setBackground(index % 2 == 0 ? background : defaultBackground);
                  }
              }
              return c;
          }
      };
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DoctorBackButton;
    private javax.swing.JLabel DoctorViewAppointmentsLabel;
    private javax.swing.JList<Appointment> DoctorViewAppointmentsList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
